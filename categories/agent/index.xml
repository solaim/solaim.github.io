<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Agent on Jerry Wang</title>
    <link>https://solaim.github.io/categories/agent/</link>
    <description>Recent content in Agent on Jerry Wang</description>
    <image>
      <title>Jerry Wang</title>
      <url>https://solaim.github.io/img/favicon.webp</url>
      <link>https://solaim.github.io/img/favicon.webp</link>
    </image>
    <generator>Hugo -- 0.147.2</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 May 2025 14:23:49 +0800</lastBuildDate>
    <atom:link href="https://solaim.github.io/categories/agent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dify实现及思考</title>
      <link>https://solaim.github.io/posts/dify%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%80%9D%E8%80%83/</link>
      <pubDate>Thu, 08 May 2025 14:23:49 +0800</pubDate>
      <guid>https://solaim.github.io/posts/dify%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%80%9D%E8%80%83/</guid>
      <description>&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;Dify前端使用React框架实现，这里不做深入探索，来看看后端的实现。&lt;/p&gt;
&lt;p&gt;主要代码目录如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;..&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;api&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 后端实现目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  app.py         &lt;span class=&#34;c1&#34;&gt;# 入口文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  controllers&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 控制层，注册路由&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    console&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# 前端API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    files&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# 图片、文件API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    inner_api&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 插件API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    service_api&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    web&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  services&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;# 业务实现层&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  models&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;# 模型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  core&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;# 逻辑实现&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;web&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 前端实现目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后端框架使用Flask，使用flask-restful管理路由，使用celery进行分布式任务管理。&lt;/p&gt;
&lt;p&gt;架构层面：&lt;/p&gt;
&lt;p&gt;API server &amp;lt;&amp;ndash;&amp;gt; Worker&lt;/p&gt;
&lt;p&gt;为了支持横向扩展，可以多节点部署worker，属于基于事件驱动的架构。&lt;/p&gt;
&lt;p&gt;实现层面：&lt;/p&gt;
&lt;p&gt;分层架构，经典的控制、服务、模型分层。&lt;/p&gt;
&lt;p&gt;数据库：&lt;/p&gt;
&lt;p&gt;业务管理使用的pg，是除MySQL外很流行的开源关系型数据库。&lt;/p&gt;
&lt;p&gt;为支持RAG，dify支持了很多款向量数据库，可以按需配置。&lt;/p&gt;
&lt;p&gt;部署：
docker compose 一行命令完成部署，快速体验很赞。&lt;/p&gt;
&lt;h2 id=&#34;思考&#34;&gt;思考&lt;/h2&gt;
&lt;p&gt;翻看dify的源码，有种熟悉的感觉，因为这就是第一份工作的完整技术栈。&lt;/p&gt;
&lt;p&gt;作为技术开发者，追逐新颖、时髦的技术，认为这些很酷，但是有时候会忘了出发点：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;技术是用来解决问题的！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dify目前已经将近96K的star。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI agent实战</title>
      <link>https://solaim.github.io/posts/ai_agent%E5%AE%9E%E6%88%98/</link>
      <pubDate>Wed, 07 May 2025 15:05:08 +0800</pubDate>
      <guid>https://solaim.github.io/posts/ai_agent%E5%AE%9E%E6%88%98/</guid>
      <description>&lt;p&gt;AI agent框架众多，本文选择Dify平台，来一波AI agent开发实战！&lt;/p&gt;
&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/langgenius/dify.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; dify/docker
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 国内docker hub访问受限，建议使用代理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 请使用新版本docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;访问127.0.0.1，页面正常可设置管理员并登陆：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;dify init&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/dify_init.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;dify login&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/dify_login.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;登陆完成，进入工作室：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;dify workspace&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/dify_workspace.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来我们开始搭建一个企业私有的AI agent。&lt;/p&gt;
&lt;h2 id=&#34;管理模型&#34;&gt;管理模型&lt;/h2&gt;
&lt;p&gt;添加模型供应商&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;dify provider&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/dify_provider.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改系统模型配置&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;dify model setup&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/dify_model_setup.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;本文使用火山方舟的deepseek和doubao embedding模型，可以在火山方舟控制台在线推理页面开通。&lt;/p&gt;
&lt;h2 id=&#34;管理知识库&#34;&gt;管理知识库&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;dify knowledge&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/dify_knowledge.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上传文档，选择embedding模型，进行知识入库。&lt;/p&gt;
&lt;h2 id=&#34;配置agent&#34;&gt;配置Agent&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;dify rag&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/dify_agent_rag.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在知识库添加面试资料文档知识库，进行聊天即可使用了。&lt;/p&gt;
&lt;h2 id=&#34;发布&#34;&gt;发布&lt;/h2&gt;
&lt;p&gt;dify提供发布功能，可以发布单独的页面或嵌入其他页面，方便使用。&lt;/p&gt;
&lt;p&gt;dify也支持workflow，比单独的agent更强大。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI Agent纵览</title>
      <link>https://solaim.github.io/posts/ai_agent%E7%BA%B5%E8%A7%88/</link>
      <pubDate>Wed, 07 May 2025 10:29:29 +0800</pubDate>
      <guid>https://solaim.github.io/posts/ai_agent%E7%BA%B5%E8%A7%88/</guid>
      <description>&lt;p&gt;AI Agent最近两三年异常火热，下面👇是某头部公司的AI Agent开发岗的JD：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;岗位职责&lt;/p&gt;
&lt;p&gt;1、负责大模型应用开发范式及一站式研发平台的设计、开发及应用，支持公司内部大模型的应用的快速落地&lt;/p&gt;
&lt;p&gt;2、负责大模型产品的整体技术解决方案，并支持技术研发和效果优化等工作，推动产品持续增长&lt;/p&gt;
&lt;p&gt;3、保障大模型应用系统架构的稳定、高效运行，帮助业务优化性能和改善系统稳定性&lt;/p&gt;
&lt;p&gt;职位描述&lt;/p&gt;
&lt;p&gt;1、计算机或相关专业本科及以上学历，2年以上工作经验，熟练掌握Python，或至少一门主流开发语言。&lt;/p&gt;
&lt;p&gt;2、有Agent平台/应用开发经验者优先，熟悉coze，dify，langflow等开发平台，了解RAG、Agent机制，使用过langchain等开源系统，有prompt工程业务优化经验者优先。&lt;/p&gt;
&lt;p&gt;3、有比较敏锐的产品意识和数据分析能力。&lt;/p&gt;
&lt;p&gt;4、有优秀的架构设计能力，了解包括检索引擎、kv存储、在线应用框架、批流处理等中间件系统，有承担过千万级以上产品应用架构设计者优先。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;从上面的JD可以提取的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发语言：Python(C++、Golang需求也较多)&lt;/li&gt;
&lt;li&gt;框架：dify、langflow等&lt;/li&gt;
&lt;li&gt;原理：RAG、Agent工作原理&lt;/li&gt;
&lt;li&gt;后端基础组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ai-agent&#34;&gt;AI Agent&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;AI Agent（也称人工智能代理、智能体）是一种能够感知环境、进行决策和执行动作的智能实体。智能体像人一样，它有记忆、有逻辑分析能力、有任务的拆解能力、问题的拆解能力和最后综合回来统一解决问题的能力。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;Agent&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/agent.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;智能体的组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I：输入，也就是上图中的感知Perception，包括文本、图片、视频、音频等&lt;/li&gt;
&lt;li&gt;O：输出，即上图中的行动Action，包括输出文本及&lt;em&gt;调用工具&lt;/em&gt;等&lt;/li&gt;
&lt;li&gt;B：大脑Brain，基于LLM，具有知识、记忆、推理、规划等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能体的形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单Agent：单个Agent完成任务&lt;/li&gt;
&lt;li&gt;多Agent：多个Agent配合完成任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rag&#34;&gt;RAG&lt;/h2&gt;
&lt;p&gt;检索增强生成（Retrieval Augmented Generation），简称 RAG。&lt;/p&gt;
&lt;p&gt;为什么会有RAG？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决知识缺失问题：大模型的知识固定在训练的数据上，无法获取最新资讯。&lt;/li&gt;
&lt;li&gt;解决快问乱答问题：大模型有幻觉问题，超出范围的答案不靠谱。&lt;/li&gt;
&lt;li&gt;解决数据安全问题：企业专有资料，不能丢给通用大模型去训练。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现路径：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;RAG&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/rag.jpg&#34;&gt;
**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将知识向量化：知识通过embedding存储在向量数据库&lt;/li&gt;
&lt;li&gt;客户检索：问题embedding，检索向量数据库，生成提示词&lt;/li&gt;
&lt;li&gt;投喂LLM：将上面生成的提示词喂给LLM生成最终的答案&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mcp&#34;&gt;MCP&lt;/h2&gt;
&lt;p&gt;Model Context Protocol（模型上下文协议）是 Anthropic 在推出的用于 LLM 应用和外部数据源（Resources）或工具（Tools）通信的标准协议，遵循 JSON-RPC 2.0 的基础消息格式。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;MCP ARCH&#34; loading=&#34;lazy&#34; src=&#34;https://solaim.github.io/img/mcp_arch.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;MCP遵循CS架构，应用包括client，client负责和server通信。&lt;/p&gt;
&lt;p&gt;核心概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源：MCP 服务器希望提供给客户端的任何类型的数据&lt;/li&gt;
&lt;li&gt;提示词：MCP 服务器能够定义可重用的提示模板和工作流&lt;/li&gt;
&lt;li&gt;工具：使服务器能够向客户端公开可执行功能。通过工具，LLM 可以与外部系统交互，执行计算，并在真实的世界中采取行动。&lt;/li&gt;
&lt;li&gt;采样：服务器通过客户端请求 LLM&lt;/li&gt;
&lt;li&gt;根：定义了服务器可以操作的边界&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细文档请参考&lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
